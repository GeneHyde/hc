/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ParameterSelection;

import DataObjects.Airfield;
import DataObjects.Runway;
import DataObjects.Position;
import java.awt.Color;
import javax.swing.DefaultListModel;

/**
 *
 * @author garreola-gutierrez
 */
public class AirfieldSelection extends javax.swing.JPanel {

    /**
     * Creates new form AirfieldSelection
     */
    // Mdl that is first displayed
    //make these private
    private DefaultListModel<Airfield> mdl = new DefaultListModel(); 
    private DefaultListModel<Position> positionsmdl = new DefaultListModel(); 
    private DefaultListModel<Runway> runwaymdl = new DefaultListModel(); 
    // Array list of Airfield objects
    Airfield [] airfieldNewList = new Airfield[3]; 
    // Array list of Airfield objects
    Runway[] runwayNewList = new Runway[3]; 

    Position[] positionsNewList = new Position[3];  
    public AirfieldSelection() {
        initComponents();
        
            // For loop to create airfield objects
            for(int i = 0; i < airfieldNewList.length; i++){
            airfieldNewList[i] = new Airfield();
            airfieldNewList[i].setName("name"+ i);
            airfieldNewList[i].setDesignator("designator" +i);
            airfieldNewList[i].setLocation("location" + i);
            airfieldNewList[i].setAltitude("altitude" + i);
            airfieldNewList[i].setMagneticVariation("magnetic Variation"+i);
            
            // Adds new created objects to defaultListModel
            mdl.addElement(airfieldNewList[i]);
        }
         // Sets defaultListModel to be the model for jlist 
        airfieldJList.setModel(mdl);    
        positionsJList.setModel(positionsmdl);
        runwayJList.setModel(runwaymdl);
        
        nameJTextField.setEditable(false);
        designatorJTextField.setEditable(false);
        locationJTextField.setEditable(false);
        altitudeJTextField.setEditable(false);
        magneticVariationJTextField.setEditable(false);
        magneticHeadingJTextField.setEditable(false);
        maximumLengthJTextField.setEditable(false);
        slopeJTextField.setEditable(false);
        centerlineOffsetJTextField.setEditable(false);
        
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        airfieldInputLabel = new javax.swing.JLabel();
        airfieldInputJTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        airfieldJList = new javax.swing.JList();
        centerlineOffsetLabel = new javax.swing.JLabel();
        airfieldNameLabel = new javax.swing.JLabel();
        desgnatorlabel = new javax.swing.JLabel();
        locationlabel = new javax.swing.JLabel();
        Altitudelabel = new javax.swing.JLabel();
        magneticVariationLabel = new javax.swing.JLabel();
        magneticHeading = new javax.swing.JLabel();
        slopeLabel = new javax.swing.JLabel();
        maximumLengthLabel = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        designatorJTextField = new javax.swing.JTextField();
        locationJTextField = new javax.swing.JTextField();
        altitudeJTextField = new javax.swing.JTextField();
        magneticVariationJTextField = new javax.swing.JTextField();
        magneticHeadingJTextField = new javax.swing.JTextField();
        maximumLengthJTextField = new javax.swing.JTextField();
        slopeJTextField = new javax.swing.JTextField();
        centerlineOffsetJTextField = new javax.swing.JTextField();
        positionsInputJTextField = new javax.swing.JTextField();
        airfieldInputLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        runwayJList = new javax.swing.JList();
        runwayInputJTextField = new javax.swing.JTextField();
        airfieldInputLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        positionsJList = new javax.swing.JList();

        airfieldInputLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        airfieldInputLabel.setText("Airfield Name :");
        airfieldInputLabel.setToolTipText("");

        airfieldInputJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                airfieldInputJTextFieldKeyReleased(evt);
            }
        });

        airfieldJList.setModel(mdl);
        airfieldJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                airfieldJListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(airfieldJList);

        centerlineOffsetLabel.setText("<html>Centerline <br/> Offset <html/>");

        airfieldNameLabel.setText("Name");

        desgnatorlabel.setText("Designator");

        locationlabel.setText("Location");

        Altitudelabel.setText("Altitude");

        magneticVariationLabel.setText("<html> Magnetic <br/> Variation </html>");
        magneticVariationLabel.setToolTipText("");
        magneticVariationLabel.setAutoscrolls(true);

        magneticHeading.setText("<html> Magnetic  Heading </html>");

        slopeLabel.setText("Slope");

        maximumLengthLabel.setText("<html>Maximum <br/> Length </html>");

        nameJTextField.setBackground(new java.awt.Color(255, 105, 105));

        designatorJTextField.setBackground(new java.awt.Color(255, 105, 105));

        locationJTextField.setBackground(new java.awt.Color(255, 105, 105));

        altitudeJTextField.setBackground(new java.awt.Color(255, 105, 105));

        magneticVariationJTextField.setBackground(new java.awt.Color(255, 105, 105));
        magneticVariationJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magneticVariationJTextFieldActionPerformed(evt);
            }
        });

        magneticHeadingJTextField.setBackground(new java.awt.Color(255, 105, 105));
        magneticHeadingJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magneticHeadingJTextFieldActionPerformed(evt);
            }
        });

        maximumLengthJTextField.setBackground(new java.awt.Color(255, 105, 105));
        maximumLengthJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximumLengthJTextFieldActionPerformed(evt);
            }
        });

        slopeJTextField.setBackground(new java.awt.Color(255, 105, 105));
        slopeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slopeJTextFieldActionPerformed(evt);
            }
        });

        centerlineOffsetJTextField.setBackground(new java.awt.Color(255, 105, 105));
        centerlineOffsetJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerlineOffsetJTextFieldActionPerformed(evt);
            }
        });

        positionsInputJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                positionsInputJTextFieldKeyReleased(evt);
            }
        });

        airfieldInputLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        airfieldInputLabel1.setText("Position Name :");
        airfieldInputLabel1.setToolTipText("");

        runwayJList.setModel(mdl);
        runwayJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runwayJListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(runwayJList);

        runwayInputJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                runwayInputJTextFieldKeyReleased(evt);
            }
        });

        airfieldInputLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        airfieldInputLabel2.setText("Runway Name");
        airfieldInputLabel2.setToolTipText("");

        positionsJList.setModel(mdl);
        positionsJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                positionsJListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(positionsJList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(airfieldInputLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(positionsInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(maximumLengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maximumLengthJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(slopeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(slopeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(centerlineOffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(centerlineOffsetJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(magneticHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(magneticHeadingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(airfieldInputLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(runwayInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(locationlabel)
                                    .addComponent(Altitudelabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(altitudeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(locationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(desgnatorlabel))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(magneticVariationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(designatorJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(magneticVariationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(airfieldInputLabel)
                                .addGap(10, 10, 10)
                                .addComponent(airfieldInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(airfieldNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airfieldInputLabel)
                    .addComponent(airfieldInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airfieldNameLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(designatorJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(desgnatorlabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationlabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Altitudelabel)
                            .addComponent(altitudeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(magneticVariationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(magneticVariationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runwayInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airfieldInputLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(magneticHeading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(magneticHeadingJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionsInputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airfieldInputLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maximumLengthJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(centerlineOffsetJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(centerlineOffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maximumLengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slopeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slopeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void airfieldInputJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_airfieldInputJTextFieldKeyReleased
        // TODO add your handling code here:
        // Creates a string from a input
        String matchstring = airfieldInputJTextField.getText();
       // makes new updated defaultListModel
        DefaultListModel airfieldeModel = new DefaultListModel();
        
        // TODO Change from String specific to type Sailplane
        for(Airfield myObj : airfieldNewList){
            if(myObj.toString().toUpperCase().startsWith(matchstring.toUpperCase()))
                airfieldeModel.addElement(myObj);
        }
        // New updated defaultListModel is set the jlist
        airfieldJList.setModel(airfieldeModel);
    }//GEN-LAST:event_airfieldInputJTextFieldKeyReleased

    private void magneticVariationJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magneticVariationJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_magneticVariationJTextFieldActionPerformed

    private void airfieldJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airfieldJListMouseClicked
        // TODO add your handling code here:
        try {
            // do stuff
            // Gets the object is that selected when the button is pushed
            // fills the parts of the object to the right jtextfields
            if(mdl.getSize() > 0){
                Airfield value = (Airfield) airfieldJList.getSelectedValue();
                nameJTextField.setText(value.getName());
                designatorJTextField.setText(value.getDesignator());
                locationJTextField.setText(value.getLocation());
                altitudeJTextField.setText(value.getAltitude());
                magneticVariationJTextField.setText(value.getMagneticVariation());

            }
        
            // Checks if jTextfields are empty and changes background 
            // of jtextfield if filled
            if(!(nameJTextField.getText().equals(""))){
                nameJTextField.setBackground(new Color(142, 250, 127));       
            }
            if(!(designatorJTextField.getText().equals(""))){
                designatorJTextField.setBackground(new Color(142, 250, 127)); 
            }
            if(!(locationJTextField.getText().equals(""))){
                locationJTextField.setBackground(new Color(142, 250, 127));  
            }
            if(!(altitudeJTextField.getText().equals(""))){
                altitudeJTextField.setBackground(new Color(142, 250, 127));
            }
            if(!(magneticVariationJTextField.getText().equals(""))){
                magneticVariationJTextField.setBackground(new Color(142, 250, 127));
            }
            for(int i = 0; i < runwayNewList.length; i++){
            runwayNewList[i] = new Runway();
            runwayNewList[i].setMagneticHeading("RUNWAYMagnetic Heading" + i);
            // Adds new created objects to defaultListModel
            runwaymdl.addElement(runwayNewList[i]);
        }
            runwayJList.setModel(runwaymdl);
        }
        catch (Exception e) {
        //TODO decide how to handle exception
        }
    }//GEN-LAST:event_airfieldJListMouseClicked

    private void positionsInputJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_positionsInputJTextFieldKeyReleased
        // TODO add your handling code here:
        // Creates a string from a input
        String matchstring = positionsInputJTextField.getText();
       // makes new updated defaultListModel
        DefaultListModel positions2Model = new DefaultListModel();
        
        // TODO Change from String specific to type Sailplane
        for(Position myObj : positionsNewList){
            if(myObj.toString().toUpperCase().startsWith(matchstring.toUpperCase()))
                positions2Model .addElement(myObj);
        }
        // New updated defaultListModel is set the jlist
        airfieldJList.setModel(positions2Model);
    }//GEN-LAST:event_positionsInputJTextFieldKeyReleased

    private void runwayJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runwayJListMouseClicked
        // TODO add your handling code here:
                try {
            // do stuff
            // Gets the object is that selected when the button is pushed
            // fills the parts of the object to the right jtextfields
            if(runwaymdl.getSize() > 0){
                Runway value = (Runway) runwayJList.getSelectedValue();      
                magneticHeadingJTextField.setText(value.getMagneticHeading());
            }
        
            // Checks if jTextfields are empty and changes background 
            // of jtextfield if filled
            if(!(magneticHeadingJTextField.getText().equals(""))){
                magneticHeadingJTextField.setBackground(new Color(142, 250, 127)); 
            }
            for(int i = 0; i < positionsNewList.length; i++){
            positionsNewList[i] = new Position();
            //positionsNewList[i].setPosition("position" +i);
            positionsNewList[i].setPositionMaximumLength("position Maximum Length"+i);
            positionsNewList[i].setPositionSlope("position Slope"+i);
            positionsNewList[i].setPositionCenterlineOffset("Position CenterlineOffest" +i);
            // Adds new created objects to defaultListModel
            positionsmdl.addElement(positionsNewList[i]);
            }
       
          positionsJList.setModel(positionsmdl);
        }
        catch (Exception e) {
        //TODO decide how to handle exception
        }
    }//GEN-LAST:event_runwayJListMouseClicked

    private void runwayInputJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_runwayInputJTextFieldKeyReleased
        // TODO add your handling code here:
        // Creates a string from a input
        String matchstring = runwayInputJTextField.getText();
       // makes new updated defaultListModel
        DefaultListModel runway2Model = new DefaultListModel();
        
        // TODO Change from String specific to type Sailplane
        for(Runway myObj : runwayNewList){
            if(myObj.toString().toUpperCase().startsWith(matchstring.toUpperCase()))
                runway2Model.addElement(myObj);
        }
        // New updated defaultListModel is set the jlist
        airfieldJList.setModel(runway2Model);
    }//GEN-LAST:event_runwayInputJTextFieldKeyReleased

    private void positionsJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positionsJListMouseClicked
        // TODO add your handling code here:
                // TODO add your handling code here:
                try {
            // do stuff
            // Gets the object is that selected when the button is pushed
            // fills the parts of the object to the right jtextfields
            if(positionsmdl.getSize() > 0){
                Position value = (Position) positionsJList.getSelectedValue();
                maximumLengthJTextField.setText(value.getPositionMaximumLength());
                slopeJTextField.setText(value.getPositionSlope());
                centerlineOffsetJTextField.setText(value.getPositionCenterlineOffset());
            }
        
            // Checks if jTextfields are empty and changes background 
            // of jtextfield if filled
           
            if(!(maximumLengthJTextField.getText().equals(""))){
                maximumLengthJTextField.setBackground(new Color(142, 250, 127));
            }
            if(!(slopeJTextField.getText().equals(""))){
                slopeJTextField.setBackground(new Color(142, 250, 127));
            }
            if(!(centerlineOffsetJTextField.getText().equals(""))){
                centerlineOffsetJTextField.setBackground(new Color(142, 250, 127));
            }
        }
        catch (Exception e) {
        //TODO decide how to handle exception
        }
    }//GEN-LAST:event_positionsJListMouseClicked

    private void centerlineOffsetJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerlineOffsetJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_centerlineOffsetJTextFieldActionPerformed

    private void slopeJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slopeJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_slopeJTextFieldActionPerformed

    private void maximumLengthJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximumLengthJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maximumLengthJTextFieldActionPerformed

    private void magneticHeadingJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magneticHeadingJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_magneticHeadingJTextFieldActionPerformed

public Airfield getSeleAirfiield() {
    if(airfieldJList.getSelectedIndex() >= 0)
        return airfieldNewList[airfieldJList.getSelectedIndex()];
    return (null);
}
public Runway getRunway() {
    if(runwayJList.getSelectedIndex() >= 0)
        return runwayNewList[runwayJList.getSelectedIndex()];
    return (null);
}
public Position getPositions() {
    if(positionsJList.getSelectedIndex() >= 0)
        return positionsNewList[positionsJList.getSelectedIndex()];
    return (null);
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Altitudelabel;
    private javax.swing.JTextField airfieldInputJTextField;
    private javax.swing.JLabel airfieldInputLabel;
    private javax.swing.JLabel airfieldInputLabel1;
    private javax.swing.JLabel airfieldInputLabel2;
    private javax.swing.JList airfieldJList;
    private javax.swing.JLabel airfieldNameLabel;
    private javax.swing.JTextField altitudeJTextField;
    private javax.swing.JTextField centerlineOffsetJTextField;
    private javax.swing.JLabel centerlineOffsetLabel;
    private javax.swing.JLabel desgnatorlabel;
    private javax.swing.JTextField designatorJTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField locationJTextField;
    private javax.swing.JLabel locationlabel;
    private javax.swing.JLabel magneticHeading;
    private javax.swing.JTextField magneticHeadingJTextField;
    private javax.swing.JTextField magneticVariationJTextField;
    private javax.swing.JLabel magneticVariationLabel;
    private javax.swing.JTextField maximumLengthJTextField;
    private javax.swing.JLabel maximumLengthLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JTextField positionsInputJTextField;
    private javax.swing.JList positionsJList;
    private javax.swing.JTextField runwayInputJTextField;
    private javax.swing.JList runwayJList;
    private javax.swing.JTextField slopeJTextField;
    private javax.swing.JLabel slopeLabel;
    // End of variables declaration//GEN-END:variables
}
