/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Configuration;

import DataObjects.DrumParameters;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

/**
 * This UI class allows the user to interact with the relevant data about 
 * a drum attached to the winch system
 *
 * @author Alex
 */
public class DrumParametersPanel extends javax.swing.JPanel implements ParameterSet {
    private List drumParams = new ArrayList<DrumParameters>();
    
    /**
     * Creates new form DrumParametersPanel
     */
    public DrumParametersPanel() {
        initComponents();
        initDrumParams();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drumButtonGroup = new javax.swing.ButtonGroup();
        coreRadiusLabel = new javax.swing.JLabel();
        coreRadiusInput = new javax.swing.JTextField();
        cableLengthLabel = new javax.swing.JLabel();
        cableLenghtInput = new javax.swing.JTextField();
        kFactorLabel = new javax.swing.JLabel();
        kFactorInput = new javax.swing.JTextField();
        endOffsetLabel = new javax.swing.JLabel();
        endOffsetInput = new javax.swing.JTextField();
        quadratureSensorLabel = new javax.swing.JLabel();
        quadratureSensorInput = new javax.swing.JTextField();
        drumsLabel = new javax.swing.JLabel();
        drum1RadioButton = new javax.swing.JRadioButton();
        drum2RadioButton = new javax.swing.JRadioButton();
        drum3RadioButton = new javax.swing.JRadioButton();
        drum4RadioButton = new javax.swing.JRadioButton();
        drum5RadioButton = new javax.swing.JRadioButton();
        drum6RadioButton = new javax.swing.JRadioButton();
        drum7RadioButton = new javax.swing.JRadioButton();
        drum8RadioButton = new javax.swing.JRadioButton();
        CoreRadiusUnits = new javax.swing.JLabel();
        cableLengthUnits = new javax.swing.JLabel();
        kFactorUnits = new javax.swing.JLabel();
        endOffsetUnits = new javax.swing.JLabel();
        quadratureSensorUnits = new javax.swing.JLabel();

        coreRadiusLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        coreRadiusLabel.setText("Core Radius: ");

        coreRadiusInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coreRadiusInputActionPerformed(evt);
            }
        });

        cableLengthLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cableLengthLabel.setText("Cable Length:");

        kFactorLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        kFactorLabel.setText("K-Factor:");

        endOffsetLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        endOffsetLabel.setText("End Offset");

        quadratureSensorLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        quadratureSensorLabel.setText("Quadrature Sensor");

        drumsLabel.setText("Drum:");

        drumButtonGroup.add(drum1RadioButton);
        drum1RadioButton.setText("1");
        drum1RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum1RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum2RadioButton);
        drum2RadioButton.setText("2");
        drum2RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum2RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum3RadioButton);
        drum3RadioButton.setText("3");
        drum3RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum3RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum4RadioButton);
        drum4RadioButton.setText("4");
        drum4RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum4RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum5RadioButton);
        drum5RadioButton.setText("5");
        drum5RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum5RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum6RadioButton);
        drum6RadioButton.setText("6");
        drum6RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum6RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum7RadioButton);
        drum7RadioButton.setText("7");
        drum7RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum7RadioButtonActionPerformed(evt);
            }
        });

        drumButtonGroup.add(drum8RadioButton);
        drum8RadioButton.setText("8");
        drum8RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drum8RadioButtonActionPerformed(evt);
            }
        });

        CoreRadiusUnits.setText("mm");

        cableLengthUnits.setText("m");

        kFactorUnits.setText("m");

        endOffsetUnits.setText("m");

        quadratureSensorUnits.setText("cycles/revolution");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quadratureSensorLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(quadratureSensorInput, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(kFactorInput, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(coreRadiusInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(kFactorLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CoreRadiusUnits)
                                            .addComponent(kFactorUnits))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(endOffsetLabel)
                                            .addComponent(cableLengthLabel)
                                            .addComponent(cableLenghtInput)
                                            .addComponent(endOffsetInput, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cableLengthUnits)
                                            .addComponent(endOffsetUnits)))
                                    .addComponent(quadratureSensorUnits)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(coreRadiusLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(drum1RadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(drum2RadioButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum3RadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum4RadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum5RadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum6RadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum7RadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(drum8RadioButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(drumsLabel)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drumsLabel)
                    .addComponent(drum1RadioButton)
                    .addComponent(drum2RadioButton)
                    .addComponent(drum3RadioButton)
                    .addComponent(drum4RadioButton)
                    .addComponent(drum5RadioButton)
                    .addComponent(drum7RadioButton)
                    .addComponent(drum8RadioButton)
                    .addComponent(drum6RadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coreRadiusLabel)
                    .addComponent(cableLengthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coreRadiusInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cableLenghtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CoreRadiusUnits)
                    .addComponent(cableLengthUnits))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kFactorLabel)
                    .addComponent(endOffsetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kFactorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endOffsetInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kFactorUnits)
                    .addComponent(endOffsetUnits))
                .addGap(18, 18, 18)
                .addComponent(quadratureSensorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quadratureSensorInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quadratureSensorUnits))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void coreRadiusInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coreRadiusInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coreRadiusInputActionPerformed

    private void drum1RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum1RadioButtonActionPerformed
        updateDisplay(0);
    }//GEN-LAST:event_drum1RadioButtonActionPerformed

    private void drum2RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum2RadioButtonActionPerformed
        updateDisplay(1);
    }//GEN-LAST:event_drum2RadioButtonActionPerformed

    private void drum3RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum3RadioButtonActionPerformed
        updateDisplay(2);
    }//GEN-LAST:event_drum3RadioButtonActionPerformed

    private void drum4RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum4RadioButtonActionPerformed
        updateDisplay(3);
    }//GEN-LAST:event_drum4RadioButtonActionPerformed

    private void drum5RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum5RadioButtonActionPerformed
        updateDisplay(4);
    }//GEN-LAST:event_drum5RadioButtonActionPerformed

    private void drum6RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum6RadioButtonActionPerformed
        updateDisplay(5);
    }//GEN-LAST:event_drum6RadioButtonActionPerformed

    private void drum7RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum7RadioButtonActionPerformed
        updateDisplay(6);
    }//GEN-LAST:event_drum7RadioButtonActionPerformed

    private void drum8RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drum8RadioButtonActionPerformed
        updateDisplay(7);
    }//GEN-LAST:event_drum8RadioButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CoreRadiusUnits;
    private javax.swing.JTextField cableLenghtInput;
    private javax.swing.JLabel cableLengthLabel;
    private javax.swing.JLabel cableLengthUnits;
    private javax.swing.JTextField coreRadiusInput;
    private javax.swing.JLabel coreRadiusLabel;
    private javax.swing.JRadioButton drum1RadioButton;
    private javax.swing.JRadioButton drum2RadioButton;
    private javax.swing.JRadioButton drum3RadioButton;
    private javax.swing.JRadioButton drum4RadioButton;
    private javax.swing.JRadioButton drum5RadioButton;
    private javax.swing.JRadioButton drum6RadioButton;
    private javax.swing.JRadioButton drum7RadioButton;
    private javax.swing.JRadioButton drum8RadioButton;
    private javax.swing.ButtonGroup drumButtonGroup;
    private javax.swing.JLabel drumsLabel;
    private javax.swing.JTextField endOffsetInput;
    private javax.swing.JLabel endOffsetLabel;
    private javax.swing.JLabel endOffsetUnits;
    private javax.swing.JTextField kFactorInput;
    private javax.swing.JLabel kFactorLabel;
    private javax.swing.JLabel kFactorUnits;
    private javax.swing.JTextField quadratureSensorInput;
    private javax.swing.JLabel quadratureSensorLabel;
    private javax.swing.JLabel quadratureSensorUnits;
    // End of variables declaration//GEN-END:variables

    @Override
    public void saveParameters() {
        //TODO error check and submit
        int coreRadius = 0;
        int cableLength = 0;
        int kFactor = 0;
        int endOffset = 0;
        int quadratureSensor = 64;
        boolean validEntries = true;
        
        try {
            coreRadius = Integer.parseInt(coreRadiusInput.getText());
            if (coreRadius < 0 || coreRadius > 1000) {
                coreRadiusInput.setBackground(Color.red);
                validEntries = false;
            }
            else
                coreRadiusInput.setBackground(Color.WHITE);
        } catch (NumberFormatException e1) {
            validEntries = false;
            coreRadiusInput.setBackground(Color.red);
        }
        
        try {
            cableLength = Integer.parseInt(cableLenghtInput.getText());
            if (cableLength < 0 || cableLength > 4000) {
                cableLenghtInput.setBackground(Color.red);
                validEntries = false;
            }
            else
                cableLenghtInput.setBackground(Color.WHITE);
        } catch(NumberFormatException e2) {
            validEntries = false;
            cableLenghtInput.setBackground(Color.red);
        }
        
        try {
            kFactor = Integer.parseInt(kFactorInput.getText());
            if (kFactor < 0 || kFactor > 8000) {
                kFactorInput.setBackground(Color.red);
                validEntries = false;
            }
            else
                kFactorInput.setBackground(Color.WHITE);
        } catch(NumberFormatException e2) {
            validEntries = false;
            kFactorInput.setBackground(Color.red);
        }
         
        try {
            endOffset = Integer.parseInt(endOffsetInput.getText());
            if (endOffset < 0 || endOffset > 250) {
                endOffsetInput.setBackground(Color.red);
                validEntries = false;
            }
            else
                endOffsetInput.setBackground(Color.WHITE);
        } catch(NumberFormatException e2) {
            validEntries = false;
            endOffsetInput.setBackground(Color.red);
        }
        
        try {
            quadratureSensor = Integer.parseInt(quadratureSensorInput.getText());
            if (quadratureSensor < 64 || quadratureSensor > 1024) {
                quadratureSensorInput.setBackground(Color.red);
                validEntries = false;
            }
            else
                quadratureSensorInput.setBackground(Color.WHITE);
        } catch(NumberFormatException e2) {
            validEntries = false;
            quadratureSensorInput.setBackground(Color.red);
        }
        
        if(validEntries) {
            if(drum1RadioButton.isSelected())
                saveParamsDrum(0,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum2RadioButton.isSelected())
                saveParamsDrum(1,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum3RadioButton.isSelected())
                saveParamsDrum(2,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum4RadioButton.isSelected())
                saveParamsDrum(3,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum5RadioButton.isSelected())
                saveParamsDrum(4,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum6RadioButton.isSelected())
                saveParamsDrum(5,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else if(drum7RadioButton.isSelected())
                saveParamsDrum(6,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
            else
                saveParamsDrum(7,coreRadius, cableLength, kFactor, endOffset, quadratureSensor );
        }
    }

    private void initDrumParams() {
        for(int i = 0; i < 8; i ++) {
            drumParams.add(new DrumParameters());
        }
    }

    private void updateDisplay(int index) {
        DrumParameters drum1 = (DrumParameters) drumParams.get(index);
        coreRadiusInput.setText(String.valueOf(drum1.getCoreRadius()));
        coreRadiusInput.setBackground(Color.WHITE);
        cableLenghtInput.setText(String.valueOf(drum1.getCableLength()));
        cableLenghtInput.setBackground(Color.WHITE);
        endOffsetInput.setText(String.valueOf(drum1.getEndOffset()));
        endOffsetInput.setBackground(Color.WHITE);
        kFactorInput.setText(String.valueOf(drum1.getKFactor()));
        kFactorInput.setBackground(Color.WHITE);
        quadratureSensorInput.setText(String.valueOf(drum1.getQuadratureSensor()));
        quadratureSensorInput.setBackground(Color.WHITE);
    }

    private void saveParamsDrum(int index, int coreRadius, int cableLength, int kFactor, int endOffset, int quadratureSensor) {
        DrumParameters drum = (DrumParameters) drumParams.get(index);
        drum.setCableLength(cableLength);
        drum.setCoreRadius(coreRadius);
        drum.setEndOffset(endOffset);
        drum.setKFactor(kFactor);
        drum.setQuadratureSensor(quadratureSensor);        
    }
}
